# Определим папку, в которой лежит эта программа, с помощью
# специального служебного объекта Ruby __FILE__ и метода dirname класса File. В
# этой папке мы и будем хранить созданный файл!
#
# В переменной file_path мы храним путь к файлу, предварительно добавляя к нему переменную со
# спец.служеб.объектом Ruby __FILE__
current_path = File.dirname(__FILE__ )
file_path = current_path + "/data/text.txt"

# Создаем пустой массив "array", в который мы будем добавлять слова, которые пройдут
# по критериям отбора, и переменную "count", где будем хранить кол-во этих слов.
array = []
count = 0

# Перед открытием файла надо проверить — существует ли файл, методом exist? у
# класса File.
unless File.exist?(file_path)
  abort '[ Файл не найден ]'
end

# Если файл существует, открываем его. Делаем это с помощью Встроенного в руби
# класса File, в конструкторе которому передается путь к файлу.
file = File.new(file_path)

# Теперь, когда у вас в переменной file объект класса File, мы можем
# прочитать содержимое файла с помощью метода read у объекта file и сохранить
# его в переменной content — это будет одна большая строка с символами
# переноса и т.д.
content = file.read

# В переменной "separation" мы вызываем метод delete(",.") с параметрами на переменной content,
# затем вызываем метод split.
separation = content.delete(",.").split

# Обязательно закрываем файл методом close.
file.close

# В цикле проходимся по массиву, поскольку метод split принимает на вход строку,
# а выводит уже массив. Если item == "хер" или item == "хуй" - добавляем переменную item
# в массив array, а переменную count увеличиваем на 1.
separation.each do |item|
  if item == "хер" || item == "хуй"
    array << item
    count += 1
  end
end

# Выводим пользователю найденные слова и их кол-во. На массиве array вызываем метод join,
# который принимает на вход массив, а выводит уже строку, в параметрах которого указываем (', ')
puts "Наши слова на 3 веселых буквы: #{array.join(', ')}(кол-во: #{count})"










